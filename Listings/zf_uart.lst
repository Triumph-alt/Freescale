C251 COMPILER V5.60.0,  zf_uart                                                            23/03/25  16:50:31  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE zf_uart
OBJECT MODULE PLACED IN .\Objects\zf_uart.obj
COMPILER INVOKED BY: D:\keil5\C251\BIN\C251.EXE seekfree_libraries\zf_uart.c XSMALL INTR2 FLOAT64 BROWSE INCDIR(.\user;.
                    -\libraries;.\seekfree_libraries;.\seekfree_peripheral) DEBUG PRINT(.\Listings\zf_uart.lst) OBJECT(.\Objects\zf_uart.obj)
                    - 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file                uart
   11           * @company                     成都逐飞科技有限公司
   12           * @author              逐飞科技(QQ790875685)
   13           * @version             查看doc内version文件 版本说明
   14           * @Software            MDK FOR C251 V5.60
   15           * @Target core         STC32G12K128
   16           * @Taobao              https://seekfree.taobao.com/
   17           * @date                2020-4-14
   18           ********************************************************************************************************
             -************/
   19          
   20          #include "zf_uart.h"
   21          #include "board.h"
   22          
   23          #include "motor.h"
   24          #include "encoder.h"
   25             
   26          
   27          uint8 busy[5];                           //接收忙标志位
   28          
   29          
   30          //串口收发相关数据
   31          uint8_t g_TxData[UART_TX_LENGTH] = {0};
   32          uint8_t g_RxData[UART_RX_LENGTH] = {0};
   33          uint8_t g_RxPointer = 0, g_RxDat = 0;
   34          
   35          
   36          //-------------------------------------------------------------------------------------------------------
             -------------
   37          //  @brief      串口初始化
   38          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
   39          //  @param      uart_rx_pin     串口接收引脚
   40          //  @param      uart_tx_pin     串口发送引脚
   41          //  @param      baud                    串口波特率
   42          //  @param      tim_n                   使用tim_n作为串口波特率发生器(TIM1-TIM4)
   43          //  @return     NULL            
   44          //  Sample usage:               uart_init(UART_1, UART1_RX_P30, UART1_TX_P31, 115200, TIM_2);        //初
             -始化串口1 波特率115200 发送引脚使用P31 接收引脚使用P30 ,使用定时器2作为波特率发生器
   45          //  @note                       串口1使用 定时器1或者定时器2 作为波特率发生器。
   46          //                                                              串口2使用 定时器2                        作为波特率发生器。
   47          //                                                              串口3使用 定时器3或者定时器2 作为波特率发生器。
   48          //                                                              串口4使用 定时器4或者定时器2 作为波特率发生器。
   49          //                              STC32G仅有 定时器0-定时器4，这5个定时器。
   50          //                                                              编码器采集数据也需要定时器作为外部计数。
   51          //                                                              如果不同的串口，使用同一个定时器，串口的波特率以最后一个初始化为准
   52          //-------------------------------------------------------------------------------------------------------
             -------------
C251 COMPILER V5.60.0,  zf_uart                                                            23/03/25  16:50:31  PAGE 2   

   53          void uart_init(UARTN_enum uart_n, UARTPIN_enum uart_rx_pin, UARTPIN_enum uart_tx_pin, uint32 baud, TIMN_e
             -num tim_n)
   54          {
   55   1          uint16 brt;
   56   1      
   57   1              brt = (uint16)(65536 - (sys_clk/baud/4));
   58   1      
   59   1      
   60   1              switch(uart_n)
   61   1              {
   62   2                      case UART_1:
   63   2                      {
   64   3                              if(TIM_1 == tim_n)
   65   3                              {
   66   4                                      SCON |= 0x50;
   67   4                                      TMOD |= 0x00;
   68   4                                      TL1 = brt;
   69   4                                      TH1 = brt >> 8;
   70   4                                      AUXR |= 0x40;
   71   4                                      TR1 = 1;
   72   4                                      busy[1] = 0;
   73   4                              }
   74   3                              else if(TIM_2 == tim_n)
   75   3                              {
   76   4                                      SCON |= 0x50;
   77   4                                      T2L = brt;
   78   4                                      T2H = brt >> 8;
   79   4                                      AUXR |= 0x15;
   80   4                              }
   81   3                              P_SW1 &= ~(0x03<<6);
   82   3                              if((UART1_RX_P30 == uart_rx_pin) && (UART1_TX_P31 == uart_tx_pin))
   83   3                              {
   84   4                                      P_SW1 |= 0x00;
   85   4                              }
   86   3                              else if((UART1_RX_P36 == uart_rx_pin) && (UART1_TX_P37 == uart_tx_pin))
   87   3                              {
   88   4                                      P_SW1 |= 0x40;
   89   4                              }
   90   3                              else if((UART1_RX_P16 == uart_rx_pin) && (UART1_TX_P17 == uart_tx_pin))
   91   3                              {
   92   4                                      P_SW1 |= 0x80;
   93   4                              }
   94   3                              else if((UART1_RX_P43 == uart_rx_pin) && (UART1_TX_P44 == uart_tx_pin))
   95   3                              {
   96   4                                      P_SW1 |= 0xc0;
   97   4                              }
   98   3                              busy[1] = 0;
   99   3                              ES = 1;
  100   3                              break;
  101   3                      }
  102   2                      
  103   2                      case UART_2:
  104   2                      {
  105   3                              if(TIM_2 == tim_n)
  106   3                              {
  107   4                                      S2CON |= 0x50;
  108   4                                      T2L = brt;
  109   4                                      T2H = brt >> 8;
  110   4                                      AUXR |= 0x14;
  111   4                              }
  112   3                              
  113   3                              P_SW2 &= ~(0x01<<0);
  114   3                              if((UART2_RX_P10 == uart_rx_pin) && (UART2_TX_P11 == uart_tx_pin))
  115   3                              {
  116   4                                      P_SW2 |= 0x00;
  117   4                              }
C251 COMPILER V5.60.0,  zf_uart                                                            23/03/25  16:50:31  PAGE 3   

  118   3                              else if((UART2_RX_P46 == uart_rx_pin) && (UART2_TX_P47 == uart_tx_pin))
  119   3                              {
  120   4                                      P_SW2 |= 0x01;
  121   4                              }
  122   3                              
  123   3                              IE2 |= 0x01 << 0;       //允许串行口2中断
  124   3                              busy[2] = 0;
  125   3                              break;
  126   3                      }
  127   2                      
  128   2                      case UART_3:
  129   2                      {
  130   3                              if(TIM_2 == tim_n)
  131   3                              {
  132   4                                      S3CON |= 0x10;
  133   4                                      T2L = brt;
  134   4                                      T2H = brt >> 8;
  135   4                                      AUXR |= 0x14;
  136   4                              }
  137   3                              else if(TIM_3 == tim_n)
  138   3                              {
  139   4                                      S3CON |= 0x50;
  140   4                                      T3L = brt;
  141   4                                      T3H = brt >> 8;
  142   4                                      T4T3M |= 0x0a;
  143   4                              }
  144   3                              
  145   3                              P_SW2 &= ~(0x01<<1);
  146   3                              if((UART3_RX_P00 == uart_rx_pin) && (UART3_TX_P01 == uart_tx_pin))
  147   3                              {
  148   4                                      P_SW2 |= 0x00;
  149   4                              }
  150   3                              else if((UART3_RX_P50 == uart_rx_pin) && (UART3_TX_P51 == uart_tx_pin))
  151   3                              {
  152   4                                      P_SW2 |= 0x02;
  153   4                              }
  154   3                              
  155   3                              IE2 |= 0x01<<3; //允许串行口3中断
  156   3                              busy[3] = 0;
  157   3                              break;
  158   3                      }
  159   2                      
  160   2                      case UART_4:
  161   2                      {
  162   3                              if(TIM_2 == tim_n)
  163   3                              {
  164   4                                      S4CON |= 0x10;
  165   4                                      T2L = brt;
  166   4                                      T2H = brt >> 8;
  167   4                                      AUXR |= 0x14;
  168   4                              }
  169   3                              else if(TIM_4 == tim_n)
  170   3                              {
  171   4                                      S4CON |= 0x50;
  172   4                                      T4L = brt;
  173   4                                      T4H = brt >> 8;
  174   4                                      T4T3M |= 0xa0;
  175   4                              }
  176   3      
  177   3                              P_SW2 &= ~(0x01<<2);
  178   3                              if((UART4_RX_P02 == uart_rx_pin) && (UART4_TX_P03 == uart_tx_pin))
  179   3                              {
  180   4                                      P_SW2 |= 0x00;
  181   4                              }
  182   3                              else if((UART4_RX_P52 == uart_rx_pin) && (UART4_TX_P53 == uart_tx_pin))
  183   3                              {
C251 COMPILER V5.60.0,  zf_uart                                                            23/03/25  16:50:31  PAGE 4   

  184   4                                      P5M0 = 0x00;
  185   4                                      P5M1 = 0x01<<2;//P5.2 需要设置为高阻
  186   4                                      P_SW2 |= 0x04;
  187   4                              }
  188   3                              IE2 |= 0x01<<4; //允许串行口4中断
  189   3                              busy[4] = 0;
  190   3                              break;
  191   3                      }
  192   2                      
  193   2              }
  194   1      
  195   1      }
  196          
  197          //-------------------------------------------------------------------------------------------------------
             -------------
  198          //  @brief      串口字节输出
  199          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
  200          //  @param      dat             需要发送的字节
  201          //  @return     void        
  202          //  Sample usage:               uart_putchar(UART_1,0xA5);       // 串口1发送0xA5
  203          //-------------------------------------------------------------------------------------------------------
             -------------
  204          void uart_putchar(UARTN_enum uart_n,uint8 dat)
  205          {
  206   1              switch(uart_n)
  207   1              {
  208   2                      case UART_1:
  209   2                              while (busy[1]);
  210   2                              busy[1] = 1;
  211   2                              SBUF = dat;
  212   2                          break;
  213   2                      case UART_2:
  214   2                              while (busy[2]);
  215   2                              busy[2] = 1;
  216   2                              S2BUF = dat;
  217   2                          break;
  218   2                      case UART_3:
  219   2                              while (busy[3]);
  220   2                              busy[3] = 1;
  221   2                              S3BUF = dat;
  222   2                          break;
  223   2                      case UART_4:
  224   2                              while (busy[4]);
  225   2                              busy[4] = 1;
  226   2                              S4BUF = dat;
  227   2                          break;
  228   2              }
  229   1      }
  230          
  231          
  232          //-------------------------------------------------------------------------------------------------------
             -------------
  233          //  @brief      串口发送数组
  234          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
  235          //  @param      *buff           要发送的数组地址
  236          //  @param      len             发送长度
  237          //  @return     void
  238          //  Sample usage:               uart_putbuff(UART_1,&a[0],5);
  239          //-------------------------------------------------------------------------------------------------------
             -------------
  240          void uart_putbuff(UARTN_enum uart_n,uint8 *p,uint32 len)
  241          {
  242   1          while(len--)
  243   1              uart_putchar(uart_n,*p++);
  244   1      }
  245          
C251 COMPILER V5.60.0,  zf_uart                                                            23/03/25  16:50:31  PAGE 5   

  246          
  247          //-------------------------------------------------------------------------------------------------------
             -------------
  248          //  @brief      串口发送字符串
  249          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
  250          //  @param      *str            要发送的字符串地址
  251          //  @return     void
  252          //  Sample usage:               uart_putstr(UART_1,"i lvoe you"); 
  253          //-------------------------------------------------------------------------------------------------------
             -------------
  254          void uart_putstr(UARTN_enum uart_n,uint8 *str)
  255          {
  256   1          while(*str)
  257   1          {
  258   2              uart_putchar(uart_n, *str++);
  259   2          }
  260   1      }
  261          
  262          void uart4_interrupt_callback(void)
  263          {
  264   1              if(g_RxPointer > 0)
  265   1              {
  266   2                      if (strncmp(g_RxData, "left_kp", 7) == 0)
  267   2                      {
  268   3                              sscanf(g_RxData, "left_kp:%f", &LeftPID.kp);
  269   3                              
  270   3      //                      sprintf(g_TxData, "left_kp:%f\n", LeftPID.kp);
  271   3      //                      uart_putstr(UART_4, g_TxData);
  272   3                      }
  273   2                      else if (strncmp(g_RxData, "left_ki", 7) == 0)
  274   2                      {
  275   3                              sscanf(g_RxData, "left_ki:%f", &LeftPID.ki);
  276   3                              
  277   3      //                      sprintf(g_TxData, "left_ki:%f\n", LeftPID.kp);
  278   3      //                      uart_putstr(UART_4, g_TxData);
  279   3                      }
  280   2                      else if (strncmp(g_RxData, "left_kd", 7) == 0)
  281   2                      {
  282   3                              sscanf(g_RxData, "left_kd:%f", &LeftPID.kd);
  283   3                              
  284   3      //                      sprintf(g_TxData, "left_kd:%f\n", LeftPID.kp);
  285   3      //                      uart_putstr(UART_4, g_TxData);
  286   3                      }
  287   2                      else if (strncmp(g_RxData, "right_kp", 8) == 0)
  288   2                      {
  289   3                              sscanf(g_RxData, "right_kp:%f", &RightPID.kp);
  290   3                              
  291   3      //                      sprintf(g_TxData, "right_kp:%f\n", LeftPID.kp);
  292   3      //                      uart_putstr(UART_4, g_TxData);
  293   3                      }
  294   2                      else if (strncmp(g_RxData, "right_ki", 8) == 0)
  295   2                      {
  296   3                              sscanf(g_RxData, "right_ki:%f", &RightPID.ki);
  297   3                              
  298   3      //                      sprintf(g_TxData, "right_ki:%f\n", LeftPID.kp);
  299   3      //                      uart_putstr(UART_4, g_TxData);
  300   3                      }
  301   2                      else if (strncmp(g_RxData, "right_kd", 8) == 0)
  302   2                      {
  303   3                              sscanf(g_RxData, "right_kd:%f", &RightPID.kd);
  304   3                              
  305   3      //                      sprintf(g_TxData, "right_kd:%f\n", LeftPID.kp);
  306   3      //                      uart_putstr(UART_4, g_TxData);
  307   3                      }
  308   2                      else if (strncmp(g_RxData, "imu_kp:", 7) == 0)
  309   2                      {
C251 COMPILER V5.60.0,  zf_uart                                                            23/03/25  16:50:31  PAGE 6   

  310   3                              sscanf(g_RxData, "imu_kp:%f", &IMU693PID.kp);
  311   3                              
  312   3      //                      sprintf(g_TxData, "imu_kp:%f\n", IMU693PID.kp);
  313   3      //                      uart_putstr(UART_4, g_TxData);
  314   3                      }
  315   2                      else if (strncmp(g_RxData, "imu_ki:", 7) == 0)
  316   2                      {
  317   3                              sscanf(g_RxData, "imu_ki:%f", &IMU693PID.ki);
  318   3                              
  319   3      //                      sprintf(g_TxData, "imu_ki:%f\n", IMU693PID.ki);
  320   3      //                      uart_putstr(UART_4, g_TxData);
  321   3                      }
  322   2                      else if (strncmp(g_RxData, "imu_kd:", 7) == 0)
  323   2                      {
  324   3                              sscanf(g_RxData, "imu_kd:%f", &IMU693PID.kd);
  325   3                              
  326   3      //                      sprintf(g_TxData, "imu_kd:%f\n", IMU693PID.kd);
  327   3      //                      uart_putstr(UART_4, g_TxData);
  328   3                      }
  329   2                      else if (strncmp(g_RxData, "gyroz:", 6) == 0)
  330   2                      {
  331   3                              sscanf(g_RxData, "gyroz:%f", &g_IMU693Point);
  332   3                              
  333   3      //                      sprintf(g_TxData, "imu_kd:%f\n", IMU693PID.kd);
  334   3      //                      uart_putstr(UART_4, g_TxData);
  335   3                      }
  336   2              }
  337   1              
  338   1              g_RxPointer = 0;
  339   1              memset(g_RxData, 0, UART_RX_LENGTH);
  340   1              memset(g_TxData, 0, UART_TX_LENGTH);
  341   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1120     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       207         14
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       408     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
